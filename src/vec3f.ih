#ifndef VEC3F_ISPC_H
#define VEC3F_ISPC_H

// 1.0 / pi
#define M_1_PI 0.31830988618379067154
// pi / 4.0
#define M_PI_4 0.78539816339744830961

struct vec3f {
	float x, y, z;
};
inline vec3f make_vec3f(float x, float y, float z){
	vec3f v;
	v.x = x;
	v.y = y;
	v.z = z;
	return v;
}
inline vec3f operator*(vec3f a, vec3f b){
	vec3f res;
	res.x = a.x * b.x;
	res.y = a.y * b.y;
	res.z = a.z * b.z;
	return res;
}
inline vec3f operator*(float s, vec3f v){
	vec3f res;
	res.x = v.x * s;
	res.y = v.y * s;
	res.z = v.z * s;
	return res;
}
inline vec3f operator*(vec3f v, float s){
	vec3f res;
	res.x = v.x * s;
	res.y = v.y * s;
	res.z = v.z * s;
	return res;
}
inline vec3f operator/(vec3f v, float s){
	vec3f res;
	res.x = v.x / s;
	res.y = v.y / s;
	res.z = v.z / s;
	return res;
}
inline vec3f operator/(vec3f a, vec3f b){
	vec3f res;
	res.x = a.x / b.x;
	res.y = a.y / b.y;
	res.z = a.z / b.z;
	return res;
}
inline vec3f operator+(vec3f a, vec3f b){
	vec3f res;
	res.x = a.x + b.x;
	res.y = a.y + b.y;
	res.z = a.z + b.z;
	return res;
}
inline vec3f operator-(vec3f a, vec3f b){
	vec3f res;
	res.x = a.x - b.x;
	res.y = a.y - b.y;
	res.z = a.z - b.z;
	return res;
}
inline float dot(vec3f a, vec3f b){
	return a.x * b.x + a.y * b.y + a.z * b.z;
}
inline float length(vec3f a){
	return sqrt(dot(a, a));
}
inline vec3f cross(vec3f a, vec3f b){
	vec3f c;
	c.x = a.y * b.z - a.z * b.y;
	c.y = a.z * b.x - a.x * b.z;
	c.z = a.x * b.y - a.y * b.x;
	return c;
}
inline vec3f normalize(vec3f a){
	float inv_len = rsqrt(dot(a, a));
	return a * inv_len;
}
inline vec3f negate(vec3f a){
	vec3f res;
	res.x = -a.x;
	res.y = -a.y;
	res.z = -a.z;
	return res;
}
inline void ortho_basis(vec3f basis[3], const vec3f n){
	basis[2] = n;
	basis[1] = make_vec3f(0.f, 0.f, 0.);

	if (n.x < 0.6f && n.x > -0.6f){
		basis[1].x = 1.f;
	} else if (n.y < 0.6f && n.y > -0.6f){
		basis[1].y = 1.f;
	} else if (n.z < 0.6f && n.z > -0.6f){
		basis[1].z = 1.f;
	} else {
		basis[1].x = 1.f;
	}
	basis[0] = normalize(cross(basis[1], basis[2]));
	basis[1] = normalize(cross(basis[2], basis[0]));
}

#endif

